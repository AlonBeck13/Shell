#include <stdio.h>    // Standard input and output functions.
#include <stdlib.h>   // General utilities functions, including exit().
#include <unistd.h>   // POSIX API functions, including fork(), execvp(), pipe(), dup2(), close(), etc.
#include <sys/types.h> // Data types used in system calls, e.g., pid_t.
#include <signal.h>   // Signal handling functions and macros.
#include <errno.h>    // Header that defines the variable errno and error constants. Used to handle errors in the code.
#include <fcntl.h>    // File control options, including file status flags like.
#include <sys/wait.h>  // Wait functions and macros
#include <string.h>

int run_process_background(int index, char **arglist);
int run_output_redirection(int index, char **arglist);
int run_input_redirection(int index, char **arglist);
int run_pipe_process(int index, char **arglist);
int regular_execute(char **arglist);
int check_for_operator(int count, char** arglist);
int prepare(void);
int process_arglist(int count, char **arglist);
int finalize(void);
void sigchld_handler(int sig);
void child_terminate();


int prepare(void){
    //Setting SIGINT to SIG_IGN so that Ctrl^C wont stop the sheel from running
    //Setting a specific handler for SIGCHLD to terminate zombies
    struct sigaction sign;

    if (signal(SIGINT, SIG_IGN) == SIG_ERR){
        perror(strerror(errno));
        exit(1);
    }

    sign.sa_handler = &sigchld_handler;  
    sigemptyset(&sign.sa_mask);          
    sign.sa_flags = SA_RESTART | SA_NOCLDSTOP;  

    if (sigaction(SIGCHLD, &sign, NULL) == -1) {
        fprintf(stderr, "%s\n", strerror(errno));
        return 1;
    }

    return 0;
}


int process_arglist(int count, char **arglist){
    int result = 0;
    int index = 0;

    index = check_for_operator(count, arglist); //check for operators such as <, >, &, |
    if (index != -1){
        if (*arglist[index] == '&'){
            result = run_process_background(index, arglist);
        }
        else if (*arglist[index] == '>'){
            result = run_output_redirection(index, arglist);
        }
        else if (*arglist[index] == '<'){
            result = run_input_redirection(index, arglist);
        }
        else if (*arglist[index] == '|'){
            result = run_pipe_process(index, arglist);
        }
    }
    else{
        result = regular_execute(arglist);
    }

    return result;
}


int run_process_background(int index, char **arglist){
    arglist[index] = NULL; // changing & to NULL
    pid_t pid = fork();

    if (pid < 0){
        perror(strerror(errno));
        return 0;
    }
    else if (pid == 0){
        if (signal(SIGCHLD, SIG_DFL) == SIG_ERR){ // Changing back the SIGCHLD handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (execvp(arglist[0], arglist) == -1){
            perror(strerror(errno));
            exit(1);
        }
    }
    return 1;
}

int run_output_redirection(int index, char **arglist){
    int fd;
    fd = open(arglist[index + 1], O_WRONLY | O_CREAT | O_TRUNC, 0777); //Opening the file. Making a new one incase it doesnt exist and making it readable, writeable and excutable
    if (fd == -1){
            perror(strerror(errno));
            return 0;
        }
    arglist[index] = NULL; // Changing > to NULL
    pid_t pid = fork();

    if (pid < 0){
        perror(strerror(errno));
        return 0;
    }

    else if (pid == 0){
        if (signal(SIGINT, SIG_DFL) == SIG_ERR){ // Changing back the SIGINT handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (signal(SIGCHLD, SIG_DFL) == SIG_ERR){ // Changing back the SIGCHLD handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (dup2(fd, 1) == -1){ // Redirecting the output to the file
            perror(strerror(errno));
            exit(1);
        }
        close(fd);
        if (execvp(arglist[0], arglist) == -1){
            perror(strerror(errno));
            exit(1);
        }
    }
    if (waitpid(pid, NULL, 0) == -1 && errno != ECHILD && errno != EINTR){
        perror(strerror(errno));
        return 0;
    }

    close(fd);
    return 1;
}

int run_input_redirection(int index, char **arglist){
    int fd;
    arglist[index] = NULL; // Changing < to NULL

    fd = open(arglist[index + 1], O_RDONLY); // Opening the file and making it read only
    if (fd == -1){
            perror(strerror(errno));
            return 0;
        }
    pid_t pid = fork();

    if (pid < 0){
        perror(strerror(errno));
        return 0;
    }

    if (pid == 0){
        if (signal(SIGINT, SIG_DFL) == SIG_ERR){ // Changing back the SIGINT handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (signal(SIGCHLD, SIG_DFL) == SIG_ERR){ // Changing back the SIGCHLD handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (dup2(fd, 0) == -1){ // Redirecting the file to the input
            perror(strerror(errno));
            exit(1);
        }
        if (execvp(arglist[0], arglist) == -1){
            perror(strerror(errno));
            exit(1);
        }
    }
    if (waitpid(pid, NULL, 0) == -1 && errno != ECHILD && errno != EINTR){
        perror(strerror(errno));
        return 0;
    }

    close(fd);
    return 1;
}

int run_pipe_process(int index, char **arglist){
    arglist[index] = NULL; //Changing | to NULL
    int pipefd[2];
    pid_t pid1;
    pid_t pid2;
    int status1;
    int status2;

    if (pipe(pipefd) == -1){
        perror(strerror(errno));
        exit(1);
    }

    pid1 = fork();

    if (pid1 < 0){
        perror(strerror(errno));
        exit(1);
    }

    else if (pid1 == 0){
        close(pipefd[0]);
        if (signal(SIGINT, SIG_DFL) == SIG_ERR){ // Changing back the SIGINT handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (signal(SIGCHLD, SIG_DFL) == SIG_ERR){ // Changing back the SIGCHLD handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (dup2(pipefd[1], 1) == -1){
            perror(strerror(errno));
            exit(1);
        }
        close(pipefd[1]);
        if (execvp(arglist[0], arglist) == -1){
            perror(strerror(errno));
            exit(1);
        }
    }

    pid2 = fork();

    if (pid2 < 0){
        perror(strerror(errno));
        exit(1);
    }

    else if (pid2 == 0){
        close(pipefd[1]);
        if (signal(SIGINT, SIG_DFL) == SIG_ERR){ // Changing back the SIGINT handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (signal(SIGCHLD, SIG_DFL) == SIG_ERR){ // Changing back the SIGCHLD handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (dup2(pipefd[0], 0) == -1){
            perror(strerror(errno));
            exit(1);
        }
        if (execvp(arglist[index + 1], arglist + index + 1) == -1){
            perror(strerror(errno));
            exit(1);
        }
        close(pipefd[0]);
    }

    close(pipefd[0]);
    close(pipefd[1]);


    if (waitpid(pid1, &status1, 0) == -1 && errno != ECHILD && errno != EINTR){
        perror(strerror(errno));
        return 0;
    }
    
    if (waitpid(pid2, &status2, 0) == -1 && errno != ECHILD && errno != EINTR){
        perror(strerror(errno));
        return 0;
    }

    return 1;
}

int regular_execute(char **arglist){
    pid_t pid = fork();

    if (pid < 0){
        perror(strerror(errno));
        return 0;
    }
    else if (pid == 0){
        if (signal(SIGINT, SIG_DFL) == SIG_ERR){ // Changing back the SIGINT handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (signal(SIGCHLD, SIG_DFL) == SIG_ERR){ // Changing back the SIGCHLD handler to SIG_DFL
            perror(strerror(errno));
            exit(1);
        }
        if (execvp(arglist[0], arglist) == -1){
            perror(strerror(errno));
            exit(1);
        }
    }

    if (waitpid(pid, NULL, 0) == -1 && errno != ECHILD && errno != EINTR){
        perror(strerror(errno));
        return 0;
    }
    return 1;
}


int check_for_operator(int count, char** arglist){ // Looking for the operator (incase one exist...)
    int index = 0;
    for (int i = 0; i < count; i++){
        if (*arglist[i] == '|' || *arglist[i] == '<' || *arglist[i] == '>' || *arglist[i] == '&'){
            return index;
        }
        else{
            index++;
        }
    }
    return -1;
}

void sigchld_handler(int sig){

    int status;
    int prev_errno = errno;

    while (1)
    {
        status = waitpid(-1, 0, WNOHANG); // Looking for child process that wasn't treated. If no process of this kind exist, move on (WNOHANG) and dont block the shell from running

        if (status == 0 || (status < 0 && errno == ECHILD))
        {
            break;
        }
        else if (status < 0 && errno != EINTR)
        {
            child_terminate();
        }
    }

    errno = prev_errno;
}

void child_terminate(){ //Terminating the unterminated child - preventing it from becoming a zombie
    fprintf(stderr, "%s\n", strerror(errno)); 
    exit(1);
}


int finalize(void){
    return 0;
}
